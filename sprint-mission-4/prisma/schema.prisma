// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @unique @default(autoincrement())
  email          String
  nickname       String
  image          String
  password       String
  createdAt      DateTime  @default(now())
  updateAt       DateTime  @updatedAt
  postedProducts Product[] @relation(name: "postedProduct")
  likeProducts   Product[] @relation(name: "likedProduct")
  likeArticles   Article[]
}

model Product {
  id          Int       @id @unique @default(autoincrement())
  name        String    @unique
  description String?
  tags        String[]
  price       Decimal   @db.Decimal(10, 2)
  createdAt   DateTime  @default(now())
  updateAt    DateTime  @updatedAt
  comments    Comment[]
  likedUsers  User[]    @relation(name: "likedProduct")
  postUser    User      @relation(fields: [postUserId], references: [id], name: "postedProduct")
  postUserId  Int
}

model Article {
  id         Int       @id @unique @default(autoincrement())
  title      String
  content    String
  createdAt  DateTime  @default(now())
  comments   Comment[]
  likedUsers User[]
}

model Comment {
  id        Int      @id @unique @default(autoincrement())
  content   String
  createdAt DateTime @default(now())

  Product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int?
  Article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int?
}
